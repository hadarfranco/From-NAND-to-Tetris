/* ALU gate:
if zx then x = 0 // 16-bit zero constant
if nx then x = !x // Bit-wise negation
if zy then y = 0 // 16-bit zero constant
if ny then y = !y // Bit-wise negation
if f then out =x+y // Integer 2's complement addition
else out = x & y // Bit-wise And
if no then out = !out // Bit-wise negation
if out=0 then zr = 1 else zr = 0 // 16-bit eq. comparison
if out<0 then ng = 1 else ng = 0 // 16-bit neg. comparison.
Overflow is neither detected nor handled.*/
CHIP ALU {
IN x[16], y[16], zx, nx, zy, ny, f, no;
OUT out[16], zr, ng;
PARTS:
// if zx then x = 0 
Mux16(a=x, b=false, sel=zx, out=buszx);
// if zy then y = 0 
Mux16(a=y, b=false, sel=zy, out=buszy);
// if nx then x = !x
Not16(in=buszx, out=notx);
Mux16(a=buszx, b=notx, sel=nx, out=outx);
// if ny then y = !y
Not16(in=buszy, out=noty);
Mux16(a=buszy, b=noty, sel=ny, out=outy);
// if f then out = x+y else out = x & y
And16(a=outx, b=outy, out=andxy);
Add16(a=outx, b=outy, out=addxy);
Mux16(a=andxy, b=addxy, sel=f, out=tempout);
// if no then out = !out
Not16(in=tempout, out=notout);
Mux16(a=tempout, b=notout, sel=no, out[0..7]=nout1, out[8..15]=nout2, out=nout, out=out);
//Mux16(a=nout, b=false, sel=false, out=out);
// if out=0 then zr = 1 else zr = 0
Or8Way(in=nout1, out=zr1);
Or8Way(in=nout2, out=zr2);
Or(a=zr1, b=zr2, out=notzr);
Not(in=notzr, out=zr);
// if out<0 then ng = 1 else ng = 0
Mux16(a=nout, b=false, sel=false, out[15]=ngsel);
Mux(a=false, b=true, sel=ngsel, out=ng);
}
