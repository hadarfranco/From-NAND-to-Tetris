/* CPU gate:
Executes the instruction according to the Hack machine language
specification. The D and A in the language specification refer to
CPU-resident registers, while M refers to the memory location
addressed by A (inM holds the value of this location).
If the instruction needs to write a value to M, the value is
placed in outM, the address is placed in addressM, and the writeM
bit is asserted. (When writeM=0, any value may appear in outM.)
If reset=1, then the CPU jumps to address 0 (i.e., sets pc=0 in
the next time unit) rather than to the address resulting from
executing the current instruction. */
CHIP CPU {
IN inM[16], instruction[16], reset;
OUT outM[16], writeM, addressM[15], pc[15];
PARTS:

Mux16(a=lastA, b=inM, sel=instruction[12], out=outMux2);
ALU(x=outD, y=outMux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=outZr, ng=outNg);

And(a=instruction[4], b=instruction[15], out=outD1);
DRegister(in=outALU, load=outD1, out=outD);

Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);

Not(in=instruction[15], out=loadA1);
Or(a=loadA1, b=instruction[5], out=loadA);
ARegister(in=outMux1, load=loadA, out=lastA, out[0..14]=addressM);

And(a=instruction[15], b=instruction[3], out=writeM);

//PC
And(a=outZr, b=instruction[1], out=jmp1);

And(a=outNg, b=instruction[2], out=jmp2);

Not(in=outZr, out=notZr);
Not(in=outNg, out=notNg);
And(a=notZr, b=notNg, out=out5);
And(a=instruction[0], b=out5, out=jmp3);

Or(a=jmp1, b=jmp2, out=outOr);
Or(a=outOr, b=jmp3, out=loadPCtmp);
And(a=loadPCtmp, b=instruction[15], out=loadPC);

PC(in=lastA, inc=true, load=loadPC, reset=reset, out[0..14]=pc);

}
