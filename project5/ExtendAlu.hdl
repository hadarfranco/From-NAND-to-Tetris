/* ExtendAlu gate:
The input of the extends ALU is instruction[9] and x[16],y[16].
the output is define as follows:
If instruction[7..8] equals 1 then the output is exactly as the ALU, Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.

If instruction[7] equals 0 the output will be x*y and disregard the rest of the instruction.

If instruction[8] equals 0 the output will be shift. Then, if instruction[4] equals 0 it will return shift of y otherwise shift of x, moreover if instruction[5] equals 0 it will return shift right otherwise shift left.
 */
CHIP ExtendAlu {
IN instruction[9], x[16], y[16];
OUT out[16], zr, ng;
PARTS:
And(a=instruction[8], b=instruction[7], out=regALU);
ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3], ny=instruction[2], f=instruction[1], no=instruction[0], out=outALU, zr=ALUzr, ng=ALUng);


Mul(a=x, b=y, out=outMul);

ShiftRight(in=x, out=rightX);
ShiftRight(in=y, out=rightY);
ShiftLeft(in=x, out=leftX);
ShiftLeft(in=y, out=leftY);

Mux4Way16(a=rightY, b=rightX, c=leftY, d=leftX, sel=instruction[4..5], out=outMux);

Mux16(a=outMul, b=outMux, sel=instruction[7], out=outM);

Mux16(a=outM, b=outALU, sel=regALU, out[0..7]=nout1, out[8..15]=nout2, out=out1, out=out);

Or8Way(in=nout1, out=zr1);
Or8Way(in=nout2, out=zr2);
Or(a=zr1, b=zr2, out=notzr);
Not(in=notzr, out=zr);

Mux16(a=out1, b=false, sel=false, out[15]=ngsel);
Mux(a=false, b=true, sel=ngsel, out=ng);
}
