/**
* This chip is an extension of the book CPU by using the extended ALU.
* More specificly if instruction[15]==0 or (instruction[14] and instruction[13] equals 1)
* the CpuMul behave exactly as the book CPU.
* While if it is C instruction and instruction[13] == 0 the output will be D*A/M 
* (according to instruction[12]).
* Moreover, if it is c instruction and instruction[14] == 0 it will behave as follows:
*
* instruction:  | 12 | 11 | 10 |
* _____________________________
* shift left D  | 0  | 1  | 1  |
* shift left A  | 0  | 1  | 0  |
* shift left M  | 1  | 1  | 0  |
* shift right D | 0  | 0  | 1  |
* shift right A | 0  | 0  | 0  |
* shift right M | 1  | 0  | 0  |
**/

CHIP CpuMul{

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

     PARTS:     
        Mux16(a=lastA, b=inM, sel=instruction[12], out=outMux2);

	    Not(in=instruction[15],out=not15);
	    And(a=instruction[14],b=instruction[13],out=ALU1);
	    Or(a=not15,b=ALU1,out=ALU);
	    Mux(a=true,b=instruction[13],sel=instruction[15],out=mul);     

        ExtendAlu(x=outD,y=outMux2,instruction[8]=ALU,instruction[7]=mul, instruction[6]=false,instruction[0..5]=instruction[6..11], out=outALU, out=outM, zr=outZr, ng=outNg);

        And(a=instruction[4], b=instruction[15], out=outD1);
        DRegister(in=outALU, load=outD1, out=outD);

        Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);

        Not(in=instruction[15], out=loadA1);
        Or(a=loadA1, b=instruction[5], out=loadA);
        ARegister(in=outMux1, load=loadA, out=lastA, out[0..14]=addressM);

        And(a=instruction[15], b=instruction[3], out=writeM);

        //PC
        And(a=outZr, b=instruction[1], out=jmp1);

        And(a=outNg, b=instruction[2], out=jmp2);

        Not(in=outZr, out=notZr);
        Not(in=outNg, out=notNg);
        And(a=notZr, b=notNg, out=out5);
        And(a=instruction[0], b=out5, out=jmp3);

        Or(a=jmp1, b=jmp2, out=outOr);
        Or(a=outOr, b=jmp3, out=loadPCtmp);
        And(a=loadPCtmp, b=instruction[15], out=loadPC);

        PC(in=lastA, inc=true, load=loadPC, reset=reset, out[0..14]=pc);

}
